"""create payroll tables

Revision ID: 0dccc10ac53e
Revises: fc3f619610bd
Create Date: 2025-07-15 18:00:57.005278

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa


# revision identifiers, used by Alembic.
revision: str = '0dccc10ac53e'
down_revision: Union[str, Sequence[str], None] = 'fc3f619610bd'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('employee_salaries',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('basic_salary', sa.Float(), nullable=False),
    sa.Column('overtime_rate', sa.Float(), nullable=True),
    sa.Column('bonus_amount', sa.Float(), nullable=True),
    sa.Column('housing_allowance', sa.Float(), nullable=True),
    sa.Column('transport_allowance', sa.Float(), nullable=True),
    sa.Column('medical_allowance', sa.Float(), nullable=True),
    sa.Column('tax_deduction', sa.Float(), nullable=True),
    sa.Column('insurance_deduction', sa.Float(), nullable=True),
    sa.Column('other_deductions', sa.Float(), nullable=True),
    sa.Column('net_salary', sa.Float(), nullable=False),
    sa.Column('salary_month', sa.Date(), nullable=False),
    sa.Column('payment_date', sa.Date(), nullable=True),
    sa.Column('payment_status', sa.String(), nullable=True),
    sa.Column('remarks', sa.String(), nullable=True),
    sa.Column('created_at', sa.TIMESTAMP(timezone=True), nullable=False),
    sa.Column('updated_at', sa.TIMESTAMP(timezone=True), nullable=True),
    sa.Column('employee_id', sa.Integer(), nullable=False),
    sa.Column('rank_id', sa.Integer(), nullable=False),
    sa.Column('department_id', sa.Integer(), nullable=False),
    sa.Column('created_by_user_id', sa.Integer(), nullable=False),
    sa.ForeignKeyConstraint(['created_by_user_id'], ['users.id'], ),
    sa.ForeignKeyConstraint(['department_id'], ['departments.id'], ),
    sa.ForeignKeyConstraint(['employee_id'], ['employees.id'], ),
    sa.ForeignKeyConstraint(['rank_id'], ['ranks.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_employee_salaries_id'), 'employee_salaries', ['id'], unique=False)
    op.create_table('salary_structures',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('base_salary', sa.Float(), nullable=False),
    sa.Column('allowances', sa.Float(), nullable=True),
    sa.Column('bonuses', sa.Float(), nullable=True),
    sa.Column('deductions', sa.Float(), nullable=True),
    sa.Column('payment_frequency', sa.String(), nullable=True),
    sa.Column('effective_date', sa.Date(), nullable=False),
    sa.Column('end_date', sa.Date(), nullable=True),
    sa.Column('created_at', sa.TIMESTAMP(timezone=True), nullable=False),
    sa.Column('updated_at', sa.TIMESTAMP(timezone=True), nullable=True),
    sa.Column('employee_id', sa.Integer(), nullable=False),
    sa.Column('rank_id', sa.Integer(), nullable=False),
    sa.Column('department_id', sa.Integer(), nullable=False),
    sa.Column('created_by_user_id', sa.Integer(), nullable=False),
    sa.ForeignKeyConstraint(['created_by_user_id'], ['users.id'], ),
    sa.ForeignKeyConstraint(['department_id'], ['departments.id'], ),
    sa.ForeignKeyConstraint(['employee_id'], ['employees.id'], ),
    sa.ForeignKeyConstraint(['rank_id'], ['ranks.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_salary_structures_id'), 'salary_structures', ['id'], unique=False)
    op.create_table('payslips',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('payslip_number', sa.String(), nullable=False),
    sa.Column('pay_period_start', sa.Date(), nullable=False),
    sa.Column('pay_period_end', sa.Date(), nullable=False),
    sa.Column('basic_salary', sa.Float(), nullable=False),
    sa.Column('overtime_pay', sa.Float(), nullable=True),
    sa.Column('bonus', sa.Float(), nullable=True),
    sa.Column('housing_allowance', sa.Float(), nullable=True),
    sa.Column('transport_allowance', sa.Float(), nullable=True),
    sa.Column('medical_allowance', sa.Float(), nullable=True),
    sa.Column('other_allowances', sa.Float(), nullable=True),
    sa.Column('gross_salary', sa.Float(), nullable=False),
    sa.Column('tax_deduction', sa.Float(), nullable=True),
    sa.Column('insurance_deduction', sa.Float(), nullable=True),
    sa.Column('loan_deduction', sa.Float(), nullable=True),
    sa.Column('other_deductions', sa.Float(), nullable=True),
    sa.Column('total_deductions', sa.Float(), nullable=False),
    sa.Column('net_salary', sa.Float(), nullable=False),
    sa.Column('payment_date', sa.Date(), nullable=True),
    sa.Column('payment_method', sa.String(), nullable=True),
    sa.Column('bank_account', sa.String(), nullable=True),
    sa.Column('remarks', sa.Text(), nullable=True),
    sa.Column('status', sa.String(), nullable=True),
    sa.Column('created_at', sa.TIMESTAMP(timezone=True), nullable=False),
    sa.Column('updated_at', sa.TIMESTAMP(timezone=True), nullable=True),
    sa.Column('employee_id', sa.Integer(), nullable=False),
    sa.Column('employee_salary_id', sa.Integer(), nullable=False),
    sa.Column('department_id', sa.Integer(), nullable=False),
    sa.Column('rank_id', sa.Integer(), nullable=False),
    sa.Column('created_by_user_id', sa.Integer(), nullable=False),
    sa.Column('approved_by_user_id', sa.Integer(), nullable=True),
    sa.ForeignKeyConstraint(['approved_by_user_id'], ['users.id'], ),
    sa.ForeignKeyConstraint(['created_by_user_id'], ['users.id'], ),
    sa.ForeignKeyConstraint(['department_id'], ['departments.id'], ),
    sa.ForeignKeyConstraint(['employee_id'], ['employees.id'], ),
    sa.ForeignKeyConstraint(['employee_salary_id'], ['employee_salaries.id'], ),
    sa.ForeignKeyConstraint(['rank_id'], ['ranks.id'], ),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('payslip_number')
    )
    op.create_index(op.f('ix_payslips_id'), 'payslips', ['id'], unique=False)
    op.create_table('salary_histories',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('previous_salary', sa.Float(), nullable=False),
    sa.Column('new_salary', sa.Float(), nullable=False),
    sa.Column('change_percentage', sa.Float(), nullable=False),
    sa.Column('change_type', sa.String(), nullable=False),
    sa.Column('change_reason', sa.Text(), nullable=True),
    sa.Column('effective_date', sa.Date(), nullable=False),
    sa.Column('created_at', sa.TIMESTAMP(timezone=True), nullable=False),
    sa.Column('employee_id', sa.Integer(), nullable=False),
    sa.Column('previous_rank_id', sa.Integer(), nullable=False),
    sa.Column('new_rank_id', sa.Integer(), nullable=False),
    sa.Column('department_id', sa.Integer(), nullable=False),
    sa.Column('created_by_user_id', sa.Integer(), nullable=False),
    sa.Column('salary_structure_id', sa.Integer(), nullable=True),
    sa.Column('employee_salary_id', sa.Integer(), nullable=True),
    sa.ForeignKeyConstraint(['created_by_user_id'], ['users.id'], ),
    sa.ForeignKeyConstraint(['department_id'], ['departments.id'], ),
    sa.ForeignKeyConstraint(['employee_id'], ['employees.id'], ),
    sa.ForeignKeyConstraint(['employee_salary_id'], ['employee_salaries.id'], ),
    sa.ForeignKeyConstraint(['new_rank_id'], ['ranks.id'], ),
    sa.ForeignKeyConstraint(['previous_rank_id'], ['ranks.id'], ),
    sa.ForeignKeyConstraint(['salary_structure_id'], ['salary_structures.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_salary_histories_id'), 'salary_histories', ['id'], unique=False)
    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_index(op.f('ix_salary_histories_id'), table_name='salary_histories')
    op.drop_table('salary_histories')
    op.drop_index(op.f('ix_payslips_id'), table_name='payslips')
    op.drop_table('payslips')
    op.drop_index(op.f('ix_salary_structures_id'), table_name='salary_structures')
    op.drop_table('salary_structures')
    op.drop_index(op.f('ix_employee_salaries_id'), table_name='employee_salaries')
    op.drop_table('employee_salaries')
    # ### end Alembic commands ###
